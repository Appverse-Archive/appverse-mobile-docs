Ext.data.JsonP.widget({"guide":"<h1 id='widget-section-appverse-widget'>Appverse Widget</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ul>\n<li>1. <a href='#!/guide/widget-section-what-is-a-widget%3F'>What is a Widget?</a>\n <ul>\n<li>1.1. <a href='#!/guide/widget-section-considerations'>Considerations</a>\n </li>\n</ul></li>\n<li>2. <a href='#!/guide/widget-section-creating-a-widget'>Creating a Widget</a>\n <ul>\n<li>2.1. <a href='#!/guide/widget-section-calling-appverse-api'>Calling Appverse API</a>\n </li>\n<li>2.2. <a href='#!/guide/widget-section-merging-with-your-appverse-application'>Merging with your appverse application</a>\n </li>\n</ul></li>\n</ul></div>\n\n<h2 id='widget-section-what-is-a-widget%3F'>What is a Widget?</h2>\n\n<p>A <strong>Widget</strong> is an Android application addon used to enhance the user experience by allowing some fast actions without opening the app and navigating through it.</p>\n\n<p>Following this guide will allow you to use some of the API used in Appverse and releasing you from the complication of dealing with the pain of replicating its behaviour.</p>\n\n<h3 id='widget-section-considerations'>Considerations</h3>\n\n<ul>\n<li>This is available just for Android.</li>\n<li>By the time of this guide we have integrated the most common shared API used as communication between app and widget, <strong>Security</strong>, but for sure we will integrate other API if needed.</li>\n</ul>\n\n\n<h2 id='widget-section-creating-a-widget'>Creating a Widget</h2>\n\n<p>In order to create a Widget we recommend to <a href=\"http://builder.gft.com/appstore/widget/AppverseAndroidWidget.zip\">download our sample</a> and start working from there. In our sample you will find the minimun base for reusing our APIs.</p>\n\n<p>Let me <del>entertain you</del> explain myself:</p>\n\n<p>It all start, as every widget, with a <strong>WidgetProvider</strong> class. There we start a service (<strong>ActionDispacherService</strong>) which is the key-part of our widget.</p>\n\n<pre><code>    Intent service = new Intent(ctx, ActionDispacherService.class);\n    service.putExtra(Constants.ACTION_ID, Constants.LOAD_START_SCREEN);\n    ctx.startService(service);\n</code></pre>\n\n<p>Doing that we end in the <strong>actionDispacher</strong>, where all the magic happens. In the first case we initialize our views using a <strong>RemoteView</strong> and assigning the actions using <strong>PendingIntent</strong> with the new ID of the action,  nothing new in the Android world.</p>\n\n<h3 id='widget-section-calling-appverse-api'>Calling Appverse API</h3>\n\n<p>Once there we will start with our new methods to invoke Appverse APIs, for every action we can create an <strong>Intent</strong> that will be processed by Appverse Runtime and will return the value to the widget.</p>\n\n<p>How we do this? Calling <strong>createTestCase</strong> and passing the methods and parameters.</p>\n\n<pre><code>    private Intent createTestCase(int action, String service, String method, String params){\n        Intent intent = new Intent(ctx.getPackageName() + \".APPVERSE_SERVICE\");\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        intent.putExtra(SERVICE_KEY, this.getClass().getName());\n\n        intent.putExtra(Constants.ACTION_ID, action);\n        intent.putExtra(APPVERSE_SERVICE_KEY, service);\n        intent.putExtra(APPVERSE_METHOD_KEY, method);\n        intent.putExtra(APPVERSE_PARAMS_KEY, params);\n\n\n        return intent;\n    }\n</code></pre>\n\n<p>Sample:</p>\n\n<pre><code>    intent = createTestCase( Constants.APPVERSE_RESULT, \"security\", \"GetStoredKeyValuePair\", \"{'param1':{'Key':'mykey1','Encryption':true}}\");\n\n    WidgetProvider.getAppContext().startActivity(intent);\n</code></pre>\n\n<p>I think this should be self-explanatory, if not do not hesitate <a href=\"mailto:frmi@gft.com\">contacting me</a>. After this, Appverse should send the response to the service with the action</p>\n\n<p><strong>Constants.APPVERSE_RESULT</strong></p>\n\n<p> and the response in an extra called</p>\n\n<p><strong>appverse_result</strong></p>\n\n<p> so you should create a case to process that one.\nAt this point your widget will have to do its own logic, but what is the sample doing here? We call <strong>processResult</strong> and there we take the called method and act accordingly</p>\n\n<pre><code>    String method = extras.getString(APPVERSE_METHOD_KEY);\n    if(method.equals(\"GetStoredKeyValuePair\")){\n\n\n        WidgetUtils.log(Log.DEBUG, \"Method GetStoredKeyValuePair\");\n        Object[] found = (Object[]) fromJSONtoKeyPair(result);\n        if(found != null &amp;&amp; found[0] != null){\n            KeyPair[] success = (KeyPair[]) found[0];\n            for(KeyPair kp : success){\n                result = \"KeyPair \"+kp.getValue();\n                WidgetUtils.log(Log.DEBUG, result);\n            }\n        }\n        views.setTextViewText(labelId, result);\n\n    }\n</code></pre>\n\n<h3 id='widget-section-merging-with-your-appverse-application'>Merging with your appverse application</h3>\n\n<p>Once your widget is ready to be tested you should run the build.bat select the output folder and move it to your app folder at the following path: <strong>[APP ROOT PATH]/Web/app/plugins/[GENERATED WIDGET FOLDER]</strong> (this folder should be the one with the application.xml file in it)</p>\n\n<p>Now you can build the app as usual and test your widget in the device.</p>\n","title":"Android Widget"});